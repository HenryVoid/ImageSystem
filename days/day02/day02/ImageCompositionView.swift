//
//  ImageCompositionView.swift
//  day02
//
//  Core GraphicsÏôÄ SwiftUI CanvasÎ°ú Ïù¥ÎØ∏ÏßÄ Ìï©ÏÑ±
//  Ïù¥ÎØ∏ÏßÄ Ïò§Î≤ÑÎ†àÏù¥, Î∏îÎ†åÎìú Î™®Îìú, ÎßàÏä§ÌÇπ Îì±ÏùÑ ÎπÑÍµêÌï©ÎãàÎã§.
//

import SwiftUI
import UIKit

struct ImageCompositionView: View {
    @State private var selectedTab = 0
    
    var body: some View {
        VStack {
            Picker("Î†åÎçîÎßÅ Î∞©Ïãù", selection: $selectedTab) {
                Text("Core Graphics").tag(0)
                Text("SwiftUI Canvas").tag(1)
                Text("Ïã§Ï†Ñ ÏòàÏ†ú").tag(2)
            }
            .pickerStyle(.segmented)
            .padding()
            
            ScrollView {
                VStack(spacing: 30) {
                    switch selectedTab {
                    case 0:
                        CoreGraphicsCompositionExample()
                    case 1:
                        SwiftUICanvasCompositionExample()
                    case 2:
                        PracticalExamplesView()
                    default:
                        CoreGraphicsCompositionExample()
                    }
                }
                .padding()
            }
        }
        .navigationTitle("Ïù¥ÎØ∏ÏßÄ Ìï©ÏÑ±")
    }
}

// MARK: - Core Graphics Ìï©ÏÑ±

struct CoreGraphicsCompositionExample: View {
    var body: some View {
        VStack(alignment: .leading, spacing: 20) {
            Text("üñºÔ∏è Core Graphics Ïù¥ÎØ∏ÏßÄ Ìï©ÏÑ±")
                .font(.title2)
                .bold()
            
            Text("UIImageÏôÄ CGContextÎ°ú Ïù¥ÎØ∏ÏßÄÎ•º Ìï©ÏÑ±Ìï©ÎãàÎã§.")
                .font(.subheadline)
                .foregroundColor(.secondary)
            
            // 1. Í∏∞Î≥∏ Ïò§Î≤ÑÎ†àÏù¥
            ExampleCard(title: "1. Í∏∞Î≥∏ Ïò§Î≤ÑÎ†àÏù¥") {
                Image(uiImage: drawBasicOverlay())
                    .resizable()
                    .scaledToFit()
                    .frame(height: 200)
            }
            
            // 2. Î∏îÎ†åÎìú Î™®Îìú
            ExampleCard(title: "2. Î∏îÎ†åÎìú Î™®Îìú") {
                Image(uiImage: drawBlendModes())
                    .resizable()
                    .scaledToFit()
                    .frame(height: 250)
            }
            
            // 3. ÏïåÌåå Ìï©ÏÑ±
            ExampleCard(title: "3. ÏïåÌåå Ìï©ÏÑ± (Ìà¨Î™ÖÎèÑ)") {
                Image(uiImage: drawAlphaComposite())
                    .resizable()
                    .scaledToFit()
                    .frame(height: 200)
            }
            
            // 4. ÌÅ¥Î¶¨Ìïë ÎßàÏä§ÌÅ¨
            ExampleCard(title: "4. ÌÅ¥Î¶¨Ìïë ÎßàÏä§ÌÅ¨") {
                Image(uiImage: drawClippingMask())
                    .resizable()
                    .scaledToFit()
                    .frame(height: 200)
            }
            
            CodeExplanationView(
                title: "Core Graphics Ìï©ÏÑ± ÌäπÏßï",
                items: [
                    "UIImage.draw() Î©îÏÑúÎìú ÏÇ¨Ïö©",
                    "CGBlendModeÎ°ú Î∏îÎ†åÎìú Î™®Îìú ÏÑ§Ï†ï",
                    "context.setAlpha()Î°ú Ìà¨Î™ÖÎèÑ Ï†úÏñ¥",
                    "context.clip()ÏúºÎ°ú ÎßàÏä§ÌÇπ",
                    "Ï†ïÎ∞ÄÌïú ÌîΩÏÖÄ Îã®ÏúÑ Ï†úÏñ¥"
                ]
            )
        }
    }
    
    // Í∏∞Î≥∏ Ïò§Î≤ÑÎ†àÏù¥
    private func drawBasicOverlay() -> UIImage {
        let size = CGSize(width: 400, height: 200)
        let renderer = UIGraphicsImageRenderer(size: size)
        
        return renderer.image { context in
            // Î∞∞Í≤Ω
            UIColor.white.setFill()
            context.fill(CGRect(origin: .zero, size: size))
            
            // Î†àÏù¥Ïñ¥ 1: ÌååÎûÄ ÏÇ¨Í∞ÅÌòï
            let layer1 = createColoredRect(color: .systemBlue, size: CGSize(width: 150, height: 150))
            layer1.draw(at: CGPoint(x: 50, y: 25))
            
            // Î†àÏù¥Ïñ¥ 2: Îπ®Í∞Ñ Ïõê (Ïò§Î≤ÑÎ†àÏù¥)
            let layer2 = createColoredCircle(color: .systemRed, size: CGSize(width: 120, height: 120))
            layer2.draw(at: CGPoint(x: 130, y: 40))
            
            // Î†àÏù¥Ïñ¥ 3: Ï¥àÎ°ù ÏÇ¨Í∞ÅÌòï
            let layer3 = createColoredRect(color: .systemGreen, size: CGSize(width: 100, height: 100))
            layer3.draw(at: CGPoint(x: 250, y: 50))
        }
    }
    
    // Î∏îÎ†åÎìú Î™®Îìú
    private func drawBlendModes() -> UIImage {
        let size = CGSize(width: 400, height: 250)
        let renderer = UIGraphicsImageRenderer(size: size)
        
        return renderer.image { context in
            let ctx = context.cgContext
            
            UIColor.white.setFill()
            context.fill(CGRect(origin: .zero, size: size))
            
            // Î∞∞Í≤Ω Ïõê
            let baseCircle = createColoredCircle(color: .systemBlue, size: CGSize(width: 80, height: 80))
            
            // Ïò§Î≤ÑÎ†àÏù¥ Ïõê
            let overlayCircle = createColoredCircle(color: .systemRed, size: CGSize(width: 80, height: 80))
            
            let blendModes: [(CGBlendMode, String, CGPoint)] = [
                (.normal, "Normal", CGPoint(x: 60, y: 60)),
                (.multiply, "Multiply", CGPoint(x: 180, y: 60)),
                (.screen, "Screen", CGPoint(x: 300, y: 60)),
                (.overlay, "Overlay", CGPoint(x: 60, y: 160)),
                (.darken, "Darken", CGPoint(x: 180, y: 160)),
                (.lighten, "Lighten", CGPoint(x: 300, y: 160))
            ]
            
            for (mode, label, position) in blendModes {
                // Î∞∞Í≤Ω
                baseCircle.draw(at: position)
                
                // Ïò§Î≤ÑÎ†àÏù¥ (Ïò§ÌîÑÏÖã)
                ctx.saveGState()
                ctx.setBlendMode(mode)
                overlayCircle.draw(at: CGPoint(x: position.x + 30, y: position.y))
                ctx.restoreGState()
                
                // Î†àÏù¥Î∏î
                let attrs: [NSAttributedString.Key: Any] = [
                    .font: UIFont.systemFont(ofSize: 10),
                    .foregroundColor: UIColor.black
                ]
                (label as NSString).draw(at: CGPoint(x: position.x + 10, y: position.y + 90), withAttributes: attrs)
            }
        }
    }
    
    // ÏïåÌåå Ìï©ÏÑ±
    private func drawAlphaComposite() -> UIImage {
        let size = CGSize(width: 400, height: 200)
        let renderer = UIGraphicsImageRenderer(size: size)
        
        return renderer.image { context in
            let ctx = context.cgContext
            
            UIColor.white.setFill()
            context.fill(CGRect(origin: .zero, size: size))
            
            // Í∑∏ÎùºÎîîÏñ∏Ìä∏ Î∞∞Í≤Ω
            let colorSpace = CGColorSpaceCreateDeviceRGB()
            let colors = [UIColor.systemPurple.cgColor, UIColor.systemPink.cgColor] as CFArray
            let gradient = CGGradient(colorsSpace: colorSpace, colors: colors, locations: nil)!
            ctx.drawLinearGradient(gradient, start: .zero, end: CGPoint(x: 0, y: size.height), options: [])
            
            // Îã§ÏñëÌïú ÏïåÌååÍ∞íÏùò Ïõê
            let alphas: [(CGFloat, CGFloat)] = [
                (1.0, 50),
                (0.7, 130),
                (0.4, 210),
                (0.1, 290)
            ]
            
            for (alpha, x) in alphas {
                ctx.saveGState()
                ctx.setAlpha(alpha)
                
                let circle = createColoredCircle(color: .white, size: CGSize(width: 80, height: 80))
                circle.draw(at: CGPoint(x: x, y: 60))
                
                ctx.restoreGState()
                
                // Î†àÏù¥Î∏î
                let label = "\(Int(alpha * 100))%"
                let attrs: [NSAttributedString.Key: Any] = [
                    .font: UIFont.systemFont(ofSize: 12, weight: .bold),
                    .foregroundColor: UIColor.white
                ]
                (label as NSString).draw(at: CGPoint(x: x + 25, y: 150), withAttributes: attrs)
            }
        }
    }
    
    // ÌÅ¥Î¶¨Ìïë ÎßàÏä§ÌÅ¨
    private func drawClippingMask() -> UIImage {
        let size = CGSize(width: 400, height: 200)
        let renderer = UIGraphicsImageRenderer(size: size)
        
        return renderer.image { context in
            let ctx = context.cgContext
            
            UIColor.white.setFill()
            context.fill(CGRect(origin: .zero, size: size))
            
            // ÏõêÌòï ÎßàÏä§ÌÅ¨
            ctx.saveGState()
            
            let circlePath = CGPath(
                ellipseIn: CGRect(x: 50, y: 50, width: 100, height: 100),
                transform: nil
            )
            ctx.addPath(circlePath)
            ctx.clip()
            
            // Í∑∏ÎùºÎîîÏñ∏Ìä∏Í∞Ä Ïõê ÏïàÏóêÎßå Í∑∏Î†§Ïßê
            let colorSpace = CGColorSpaceCreateDeviceRGB()
            let colors = [UIColor.systemBlue.cgColor, UIColor.systemPurple.cgColor] as CFArray
            let gradient = CGGradient(colorsSpace: colorSpace, colors: colors, locations: nil)!
            ctx.drawLinearGradient(
                gradient,
                start: CGPoint(x: 50, y: 50),
                end: CGPoint(x: 150, y: 150),
                options: []
            )
            
            ctx.restoreGState()
            
            // Î≥Ñ ÎßàÏä§ÌÅ¨
            ctx.saveGState()
            
            let starPath = createStarPath(center: CGPoint(x: 250, y: 100), radius: 50, points: 5)
            ctx.addPath(starPath)
            ctx.clip()
            
            // Ìå®ÌÑ¥Ïù¥ Î≥Ñ ÏïàÏóêÎßå Í∑∏Î†§Ïßê
            let colors2 = [UIColor.systemYellow.cgColor, UIColor.systemOrange.cgColor] as CFArray
            let gradient2 = CGGradient(colorsSpace: colorSpace, colors: colors2, locations: nil)!
            ctx.drawLinearGradient(
                gradient2,
                start: CGPoint(x: 200, y: 50),
                end: CGPoint(x: 300, y: 150),
                options: []
            )
            
            ctx.restoreGState()
        }
    }
    
    // Ìó¨Ìçº Ìï®Ïàò
    private func createColoredRect(color: UIColor, size: CGSize) -> UIImage {
        let renderer = UIGraphicsImageRenderer(size: size)
        return renderer.image { context in
            color.setFill()
            context.fill(CGRect(origin: .zero, size: size))
        }
    }
    
    private func createColoredCircle(color: UIColor, size: CGSize) -> UIImage {
        let renderer = UIGraphicsImageRenderer(size: size)
        return renderer.image { context in
            color.setFill()
            context.cgContext.fillEllipse(in: CGRect(origin: .zero, size: size))
        }
    }
    
    private func createStarPath(center: CGPoint, radius: CGFloat, points: Int) -> CGPath {
        let path = CGMutablePath()
        let angle = CGFloat.pi * 2 / CGFloat(points)
        let innerRadius = radius * 0.4
        
        for i in 0..<points * 2 {
            let r = i % 2 == 0 ? radius : innerRadius
            let currentAngle = angle * CGFloat(i) - .pi / 2
            let x = center.x + cos(currentAngle) * r
            let y = center.y + sin(currentAngle) * r
            
            if i == 0 {
                path.move(to: CGPoint(x: x, y: y))
            } else {
                path.addLine(to: CGPoint(x: x, y: y))
            }
        }
        
        path.closeSubpath()
        return path
    }
}

// MARK: - SwiftUI Canvas Ìï©ÏÑ±

struct SwiftUICanvasCompositionExample: View {
    var body: some View {
        VStack(alignment: .leading, spacing: 20) {
            Text("üé® SwiftUI Canvas Ïù¥ÎØ∏ÏßÄ Ìï©ÏÑ±")
                .font(.title2)
                .bold()
            
            Text("GraphicsContextÎ°ú Ïù¥ÎØ∏ÏßÄÎ•º Ìï©ÏÑ±Ìï©ÎãàÎã§.")
                .font(.subheadline)
                .foregroundColor(.secondary)
            
            // 1. Í∏∞Î≥∏ Ïò§Î≤ÑÎ†àÏù¥
            ExampleCard(title: "1. Í∏∞Î≥∏ Ïò§Î≤ÑÎ†àÏù¥") {
                Canvas { context, size in
                    // Î∞∞Í≤Ω
                    context.fill(Path(CGRect(origin: .zero, size: size)), with: .color(.white))
                    
                    // Î†àÏù¥Ïñ¥ 1: ÌååÎûÄ ÏÇ¨Í∞ÅÌòï
                    let rect1 = Path(CGRect(x: 50, y: 25, width: 150, height: 150))
                    context.fill(rect1, with: .color(.blue))
                    
                    // Î†àÏù¥Ïñ¥ 2: Îπ®Í∞Ñ Ïõê
                    let circle = Path(ellipseIn: CGRect(x: 130, y: 40, width: 120, height: 120))
                    context.fill(circle, with: .color(.red))
                    
                    // Î†àÏù¥Ïñ¥ 3: Ï¥àÎ°ù ÏÇ¨Í∞ÅÌòï
                    let rect2 = Path(CGRect(x: 250, y: 50, width: 100, height: 100))
                    context.fill(rect2, with: .color(.green))
                }
                .frame(height: 200)
            }
            
            // 2. Î∏îÎ†åÎìú Î™®Îìú
            ExampleCard(title: "2. Î∏îÎ†åÎìú Î™®Îìú") {
                Canvas { context, size in
                    context.fill(Path(CGRect(origin: .zero, size: size)), with: .color(.white))
                    
                    let blendModes: [(GraphicsContext.BlendMode, String, CGPoint)] = [
                        (.normal, "Normal", CGPoint(x: 60, y: 60)),
                        (.multiply, "Multiply", CGPoint(x: 180, y: 60)),
                        (.screen, "Screen", CGPoint(x: 300, y: 60)),
                        (.overlay, "Overlay", CGPoint(x: 60, y: 160)),
                        (.darken, "Darken", CGPoint(x: 180, y: 160)),
                        (.lighten, "Lighten", CGPoint(x: 300, y: 160))
                    ]
                    
                    for (mode, label, position) in blendModes {
                        // Î∞∞Í≤Ω Ïõê
                        let baseCircle = Path(ellipseIn: CGRect(x: position.x, y: position.y, width: 80, height: 80))
                        context.fill(baseCircle, with: .color(.blue))
                        
                        // Ïò§Î≤ÑÎ†àÏù¥ Ïõê
                        var contextCopy = context
                        contextCopy.blendMode = mode
                        let overlayCircle = Path(ellipseIn: CGRect(x: position.x + 30, y: position.y, width: 80, height: 80))
                        contextCopy.fill(overlayCircle, with: .color(.red))
                        
                        // Î†àÏù¥Î∏î
                        let text = Text(label)
                            .font(.system(size: 10))
                        context.draw(text, at: CGPoint(x: position.x + 40, y: position.y + 95), anchor: .center)
                    }
                }
                .frame(height: 250)
            }
            
            // 3. Ìà¨Î™ÖÎèÑ
            ExampleCard(title: "3. Ìà¨Î™ÖÎèÑ") {
                Canvas { context, size in
                    // Í∑∏ÎùºÎîîÏñ∏Ìä∏ Î∞∞Í≤Ω
                    let gradient = Gradient(colors: [.purple, .pink])
                    context.fill(
                        Path(CGRect(origin: .zero, size: size)),
                        with: .linearGradient(gradient, startPoint: .zero, endPoint: CGPoint(x: 0, y: size.height))
                    )
                    
                    // Îã§ÏñëÌïú Ìà¨Î™ÖÎèÑÏùò Ïõê
                    let alphas: [(Double, CGFloat)] = [
                        (1.0, 50),
                        (0.7, 130),
                        (0.4, 210),
                        (0.1, 290)
                    ]
                    
                    for (alpha, x) in alphas {
                        var contextCopy = context
                        contextCopy.opacity = alpha
                        
                        let circle = Path(ellipseIn: CGRect(x: x, y: 60, width: 80, height: 80))
                        contextCopy.fill(circle, with: .color(.white))
                        
                        let label = Text("\(Int(alpha * 100))%")
                            .font(.system(size: 12, weight: .bold))
                            .foregroundColor(.white)
                        context.draw(label, at: CGPoint(x: x + 40, y: 150), anchor: .center)
                    }
                }
                .frame(height: 200)
            }
            
            // 4. ÎßàÏä§ÌÅ¨
            ExampleCard(title: "4. ÎßàÏä§ÌÅ¨") {
                Canvas { context, size in
                    context.fill(Path(CGRect(origin: .zero, size: size)), with: .color(.white))
                    
                    // ÏõêÌòï ÎßàÏä§ÌÅ¨
                    let circleRect = CGRect(x: 50, y: 50, width: 100, height: 100)
                    let circlePath = Path(ellipseIn: circleRect)
                    
                    context.drawLayer { layerContext in
                        layerContext.clip(to: circlePath)
                        
                        let gradient = Gradient(colors: [.blue, .purple])
                        layerContext.fill(
                            Path(circleRect),
                            with: .linearGradient(gradient, startPoint: circleRect.origin, endPoint: CGPoint(x: circleRect.maxX, y: circleRect.maxY))
                        )
                    }
                    
                    // Î≥Ñ ÎßàÏä§ÌÅ¨
                    let starCenter = CGPoint(x: 250, y: 100)
                    let starPath = createSwiftUIStarPath(center: starCenter, radius: 50, points: 5)
                    
                    context.drawLayer { layerContext in
                        layerContext.clip(to: starPath)
                        
                        let gradient = Gradient(colors: [.yellow, .orange])
                        let starBounds = starPath.boundingRect
                        layerContext.fill(
                            Path(starBounds),
                            with: .linearGradient(gradient, startPoint: starBounds.origin, endPoint: CGPoint(x: starBounds.maxX, y: starBounds.maxY))
                        )
                    }
                }
                .frame(height: 200)
            }
            
            CodeExplanationView(
                title: "SwiftUI Canvas Ìï©ÏÑ± ÌäπÏßï",
                items: [
                    "PathÏôÄ GraphicsContext ÏÇ¨Ïö©",
                    "blendMode ÌîÑÎ°úÌçºÌã∞Î°ú Î∏îÎ†åÎìú",
                    "opacityÎ°ú Ìà¨Î™ÖÎèÑ Ï†úÏñ¥",
                    "clip()ÏúºÎ°ú ÎßàÏä§ÌÇπ",
                    "ÏÑ†Ïñ∏Ï†ÅÏù¥Í≥† ÏßÅÍ¥ÄÏ†Å"
                ]
            )
        }
    }
    
    private func createSwiftUIStarPath(center: CGPoint, radius: CGFloat, points: Int) -> Path {
        var path = Path()
        let angle = CGFloat.pi * 2 / CGFloat(points)
        let innerRadius = radius * 0.4
        
        for i in 0..<points * 2 {
            let r = i % 2 == 0 ? radius : innerRadius
            let currentAngle = angle * CGFloat(i) - .pi / 2
            let x = center.x + cos(currentAngle) * r
            let y = center.y + sin(currentAngle) * r
            
            if i == 0 {
                path.move(to: CGPoint(x: x, y: y))
            } else {
                path.addLine(to: CGPoint(x: x, y: y))
            }
        }
        
        path.closeSubpath()
        return path
    }
}

// MARK: - Ïã§Ï†Ñ ÏòàÏ†ú

struct PracticalExamplesView: View {
    var body: some View {
        VStack(alignment: .leading, spacing: 20) {
            Text("üöÄ Ïã§Ï†Ñ ÏòàÏ†ú")
                .font(.title2)
                .bold()
            
            // ÏõåÌÑ∞ÎßàÌÅ¨
            ExampleCard(title: "ÏõåÌÑ∞ÎßàÌÅ¨ Ï∂îÍ∞Ä") {
                Image(uiImage: createWatermarkedImage())
                    .resizable()
                    .scaledToFit()
                    .frame(height: 200)
            }
            
            // ÌîÑÎ°úÌïÑ ÏïÑÎ∞îÌÉÄ
            ExampleCard(title: "ÌîÑÎ°úÌïÑ ÏïÑÎ∞îÌÉÄ (ÏõêÌòï + ÌÖåÎëêÎ¶¨)") {
                HStack(spacing: 20) {
                    Image(uiImage: createProfileAvatar())
                        .resizable()
                        .frame(width: 100, height: 100)
                    
                    Text("Core Graphics")
                        .font(.caption)
                }
                .frame(maxWidth: .infinity)
            }
            
            // Î∞∞ÏßÄ
            ExampleCard(title: "ÏïåÎ¶º Î∞∞ÏßÄ") {
                Image(uiImage: createNotificationBadge())
                    .resizable()
                    .scaledToFit()
                    .frame(height: 100)
            }
        }
    }
    
    private func createWatermarkedImage() -> UIImage {
        let size = CGSize(width: 400, height: 200)
        let renderer = UIGraphicsImageRenderer(size: size)
        
        return renderer.image { context in
            // Í∞ÄÏÉÅÏùò Ïù¥ÎØ∏ÏßÄ (Í∑∏ÎùºÎîîÏñ∏Ìä∏ Î∞∞Í≤Ω)
            let colorSpace = CGColorSpaceCreateDeviceRGB()
            let colors = [UIColor.systemTeal.cgColor, UIColor.systemBlue.cgColor] as CFArray
            let gradient = CGGradient(colorsSpace: colorSpace, colors: colors, locations: nil)!
            context.cgContext.drawLinearGradient(gradient, start: .zero, end: CGPoint(x: size.width, y: size.height), options: [])
            
            // ÏõåÌÑ∞ÎßàÌÅ¨
            let watermark = "¬© 2025"
            let attrs: [NSAttributedString.Key: Any] = [
                .font: UIFont.systemFont(ofSize: 30, weight: .bold),
                .foregroundColor: UIColor.white.withAlphaComponent(0.3)
            ]
            
            let textSize = watermark.size(withAttributes: attrs)
            let x = size.width - textSize.width - 20
            let y = size.height - textSize.height - 20
            
            (watermark as NSString).draw(at: CGPoint(x: x, y: y), withAttributes: attrs)
        }
    }
    
    private func createProfileAvatar() -> UIImage {
        let size = CGSize(width: 100, height: 100)
        let renderer = UIGraphicsImageRenderer(size: size)
        
        return renderer.image { context in
            let ctx = context.cgContext
            
            // ÏõêÌòï ÌÅ¥Î¶¨Ìïë
            let circlePath = CGPath(ellipseIn: CGRect(origin: .zero, size: size), transform: nil)
            ctx.addPath(circlePath)
            ctx.clip()
            
            // ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ (Í∑∏ÎùºÎîîÏñ∏Ìä∏Î°ú ÎåÄÏ≤¥)
            let colorSpace = CGColorSpaceCreateDeviceRGB()
            let colors = [UIColor.systemPurple.cgColor, UIColor.systemPink.cgColor] as CFArray
            let gradient = CGGradient(colorsSpace: colorSpace, colors: colors, locations: nil)!
            ctx.drawRadialGradient(
                gradient,
                startCenter: CGPoint(x: size.width/2, y: size.height/2),
                startRadius: 0,
                endCenter: CGPoint(x: size.width/2, y: size.height/2),
                endRadius: size.width/2,
                options: []
            )
            
            // ÌÖåÎëêÎ¶¨
            ctx.resetClip()
            ctx.setStrokeColor(UIColor.white.cgColor)
            ctx.setLineWidth(4)
            ctx.addPath(circlePath)
            ctx.strokePath()
        }
    }
    
    private func createNotificationBadge() -> UIImage {
        let size = CGSize(width: 120, height: 100)
        let renderer = UIGraphicsImageRenderer(size: size)
        
        return renderer.image { context in
            let ctx = context.cgContext
            
            UIColor.white.setFill()
            context.fill(CGRect(origin: .zero, size: size))
            
            // ÏïÑÏù¥ÏΩò (ÏÇ¨Í∞ÅÌòïÏúºÎ°ú ÌëúÌòÑ)
            UIColor.systemBlue.setFill()
            ctx.fill(CGRect(x: 30, y: 30, width: 40, height: 40))
            
            // Î∞∞ÏßÄ
            let badgeRect = CGRect(x: 60, y: 20, width: 30, height: 30)
            let badgePath = UIBezierPath(ovalIn: badgeRect)
            
            UIColor.systemRed.setFill()
            badgePath.fill()
            
            // Î∞∞ÏßÄ Ïà´Ïûê
            let count = "5"
            let attrs: [NSAttributedString.Key: Any] = [
                .font: UIFont.systemFont(ofSize: 16, weight: .bold),
                .foregroundColor: UIColor.white
            ]
            
            let textSize = count.size(withAttributes: attrs)
            let textX = badgeRect.midX - textSize.width / 2
            let textY = badgeRect.midY - textSize.height / 2
            
            (count as NSString).draw(at: CGPoint(x: textX, y: textY), withAttributes: attrs)
        }
    }
}

// MARK: - ÌîÑÎ¶¨Î∑∞

#Preview {
    NavigationStack {
        ImageCompositionView()
    }
}

